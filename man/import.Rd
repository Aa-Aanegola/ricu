% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setup-import.R
\name{import_src}
\alias{import_src}
\alias{import_src.src_cfg}
\alias{import_src.character}
\alias{import_tbl}
\alias{import_tbl.tbl_cfg}
\title{Data import utilities}
\usage{
import_src(x, ...)

\method{import_src}{src_cfg}(x, dir = src_data_dir(x), force = FALSE, ...)

\method{import_src}{character}(x, name = "data-sources", file = NULL, ...)

import_tbl(x, ...)

\method{import_tbl}{tbl_cfg}(x, dir = src_data_dir(x), progress = NULL, ...)
}
\arguments{
\item{x}{Object specifying the source configuration}

\item{...}{Passed to downstream methods (finally to
\link[readr:read_csv]{readr::read_csv}/\link[readr:read_csv_chunked]{readr::read_csv_chunked})/generic consistency}

\item{dir}{The directory where the data was downloaded to (see
\code{\link[=download_src]{download_src()}}).}

\item{force}{Logical flag indicating whether to overwrite already imported
tables}

\item{name}{String valued name of a config file which will be looked up in
the default config directors}

\item{file}{Full file name to load}

\item{progress}{Either \code{NULL} or a progress bar as created by
\code{\link[progress:progress_bar]{progress::progress_bar()}}}
}
\description{
In order to speed up data access operations, \code{ricu} does not directly use
the PhysioNet provided CSV files, but converts all data to \code{\link[fst:fst]{fst::fst()}}
format, which allows for random row and column access. Large tables are
split into chunks in order to keep memory requirements under control.
}
\details{
A nested list supplied as \code{config} argument controls how the CSV data is
parsed and ingested. A the top level, elements \code{name} (string), \code{base_url}
(string), \code{version} (string) and \code{tables} (list) are expected. For every
file to be read in, an entry in \code{tables} with the name of the corresponding
file is assumed, requiring a list named \code{col_spec} and optionally a list
named \code{partitioning}.

Every \code{col_spec} node again is expected to be a named list with names
corresponding to column names in the CSV and list valued entries. Finally,
a list node defining a single column is a named list with a required,
string-valued \code{type} entry which is interpreted as \code{readr} column
specification function (see \code{\link[readr:cols]{readr::cols()}}). Further list entries will be
passed as arguments to the column specification function. A column defined
as\preformatted{list(type = "col_datetime", format = "\%Y-\%m-\%d \%H:\%M:\%S")
}

will therefore result in a \code{readr} column specification like\preformatted{col_datetime(format = "\%Y-\%m-\%d \%H:\%M:\%S")
}

Entries controlling the partitioning of tables, specified as \code{partitioning}
list nodes are expected to be named lists of length 1, where the name
corresponds to the column used for partitioning and partitions are defined
as integer vector which is passed to \code{\link[base:findInterval]{base::findInterval()}}. This implies
that partitions can only be created on integer valued columns.

Putting all this together, the expected structure of \code{config} is as\preformatted{list(
  name = "some_name",
  base_url = "some_url",
  version = "major.minor",
  tables = list(
    file_name_table_1 = list(
      col_spec = list(
        colname_1 = list(type = "col_*"),
        colname_2 = list(type = "col_*"),
        ...
      )
    ),
    file_name_table_2 = list(
      col_spec = list(...),
      partitioning = list(colname_i = c(0L, ))
    ),
    ...
  )
)
}

Configurations for the MIMIC-III and eICU databases are available in
\code{extdata/config} as JSON files and can be read in using \code{\link[=get_config]{get_config()}}.
}
\examples{
\dontrun{

dir <- tempdir()
list.files(dir)

download_src("mimic_demo", dir)
list.files(dir)

import_src("mimic_demo", dir)
list.files(dir)

unlink(dir, recursive = TRUE)

}

}
